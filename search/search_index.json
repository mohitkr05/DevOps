{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DevOps Tutorial A documentation for the Youtube series to understand DevOps. Available in English and Hindi (Please note these are not translations) Chapters DevOps Building Software & Waterfall Model Agile Types of Agile frameworks DevOps 12 Factor app Linux Why learn linux Understanding the Shell Using files and directories Understanding Virtualization What is virtualization Installing Virtualbox Discussion","title":"Home"},{"location":"#devops-tutorial","text":"A documentation for the Youtube series to understand DevOps. Available in English and Hindi (Please note these are not translations)","title":"DevOps Tutorial"},{"location":"#chapters","text":"","title":"Chapters"},{"location":"#devops","text":"Building Software & Waterfall Model Agile Types of Agile frameworks DevOps 12 Factor app","title":"DevOps"},{"location":"#linux","text":"Why learn linux Understanding the Shell Using files and directories","title":"Linux"},{"location":"#understanding-virtualization","text":"What is virtualization Installing Virtualbox","title":"Understanding Virtualization"},{"location":"#discussion","text":"","title":"Discussion"},{"location":"DevOps/ch_01/","text":"Building Software Let us how software is built. Traditionally, the procedure to build software was slow and linear. Usually termed as a waterfall model had each step dedidcated to a single task. Waterfall model Each step tried to answer some simple question. Requirements What are the requirements of the customer? Design How to build the software with all these requirements? How the high level design looks like? What are the components required Implementation The actual building of the software? Verfication How is the software performing as per the requirements of the customer? Maintenance Are there any operational issues, bug-fixes and patches required? Advantages Simple to implement Clear requirements Problem with this methodology Slow Resistant to change Feedback? Scoping issues Integration is painful.","title":"Building Software"},{"location":"DevOps/ch_01/#building-software","text":"Let us how software is built. Traditionally, the procedure to build software was slow and linear. Usually termed as a waterfall model had each step dedidcated to a single task.","title":"Building Software"},{"location":"DevOps/ch_01/#waterfall-model","text":"Each step tried to answer some simple question. Requirements What are the requirements of the customer? Design How to build the software with all these requirements? How the high level design looks like? What are the components required Implementation The actual building of the software? Verfication How is the software performing as per the requirements of the customer? Maintenance Are there any operational issues, bug-fixes and patches required?","title":"Waterfall model"},{"location":"DevOps/ch_01/#advantages","text":"Simple to implement Clear requirements","title":"Advantages"},{"location":"DevOps/ch_01/#problem-with-this-methodology","text":"Slow Resistant to change Feedback? Scoping issues Integration is painful.","title":"Problem with this methodology"},{"location":"DevOps/ch_02/","text":"Agile The major issue with the waterfall model was that it was resistant to change & feedback. Thus some methodolo- gies and practices were required that would embrace, rather than reject,higher rates of change and would be open to feedback. In February 2001, 17 practitioners and authors met in Snowbird, Utah decided to work on software delivery practice that would focus on customer satisfaction and high quality. They cate- gorized their methodologies as \u201cagile\u201d\u2014a term with a decade of use in flexible manufacturing practices Agile Manifesto We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value : - Individuals and interactions over processes and tools - Working software over comprehensive documentation - Customer collaboration over contract negotiation - Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more. Agile manifesto principles Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Business people and developers must work together daily throughout the project. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Working software is the primary measure of progress. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Continuous attention to technical excellence and good design enhances agility. Simplicity \u2014 the art of maximizing the amount of work not done \u2014 is essential. The best architectures, requirements, and designs emerge from self-organizing teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.","title":"Agile"},{"location":"DevOps/ch_02/#agile","text":"The major issue with the waterfall model was that it was resistant to change & feedback. Thus some methodolo- gies and practices were required that would embrace, rather than reject,higher rates of change and would be open to feedback. In February 2001, 17 practitioners and authors met in Snowbird, Utah decided to work on software delivery practice that would focus on customer satisfaction and high quality. They cate- gorized their methodologies as \u201cagile\u201d\u2014a term with a decade of use in flexible manufacturing practices Agile Manifesto We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value : - Individuals and interactions over processes and tools - Working software over comprehensive documentation - Customer collaboration over contract negotiation - Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more.","title":"Agile"},{"location":"DevOps/ch_02/#agile-manifesto-principles","text":"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Business people and developers must work together daily throughout the project. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Working software is the primary measure of progress. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Continuous attention to technical excellence and good design enhances agility. Simplicity \u2014 the art of maximizing the amount of work not done \u2014 is essential. The best architectures, requirements, and designs emerge from self-organizing teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.","title":"Agile manifesto principles"},{"location":"DevOps/ch_03/","text":"Agile Frameworks Agile is a blanket term for a wide range of iterative development frameworks. The key for all these frameworks is that, all of these frameworks are iterative and embrance change quickly. Agile frameworks are applied at different organisation levels. Team Level Scrum Scrum is a framework that helps teams work together. Much like a rugby team (where it gets its name) training for the big game, scrum encourages teams to learn through experiences, self-organize while working on a problem, and reflect on their wins and losses to continuously improve. XP Extreme programming (XP) is a software development methodology intended to improve software quality and responsiveness to changing customer requirements. As a type of agile software development, it advocates frequent releases in short development cycles, intended to improve productivity and introduce checkpoints at which new customer requirements can be adopted. Kanban Kanban is a popular framework used to implement agile and DevOps software development. It requires real-time communication of capacity and full transparency of work. Work items are represented visually on a kanban board, allowing team members to see the state of every piece of work at any time. Scrumban Scrumban is a project management framework that combines important features of two popular agile methodologies: Scrum and Kanban. The Scrumban framework merges the structure and predictable routines of Scrum with Kanban\u2019s flexibility to make teams more agile, efficient, and productive. Scrum of Scrums Scrum of Scrums is a scaled agile technique that offers a way to connect multiple teams who need to work together to deliver complex solutions. It helps teams develop and deliver complex products through transparency, inspection, and adaptation, at scale. It\u2019s particularly successful when all high-performing scrum team members work towards a common goal, have trust, respect, and are completely aligned. Scaling Agile SAFe The Scaled Agile Framework\u00ae (SAFe\u00ae) is a set of organizational and workflow patterns for implementing agile practices at an enterprise scale. The framework is a body of knowledge that includes structured guidance on roles and responsibilities, how to plan and manage the work, and values to uphold. SAFe promotes alignment, collaboration, and delivery across large numbers of agile teams. It was formed around three primary bodies of knowledge: agile software development, lean product development, and systems thinking. Disciplined Agile Delivery (DAD) Disciplined Agile\u00ae Delivery (DAD) is a people-first, learning-oriented hybrid agile approach to IT solution delivery. DAD addresses all aspects of the full delivery life cycle, supporting multiple ways of working (WoW) that can be tailored for the context that you face. DAD encompasses all aspects of agile software development in a robust, pragmatic, and governable manner. LeSS LeSS is a scaled up version of one-team Scrum, and it maintains many of the practices and ideas of one-team Scrum.","title":"Agile Frameworks"},{"location":"DevOps/ch_03/#agile-frameworks","text":"Agile is a blanket term for a wide range of iterative development frameworks. The key for all these frameworks is that, all of these frameworks are iterative and embrance change quickly. Agile frameworks are applied at different organisation levels.","title":"Agile Frameworks"},{"location":"DevOps/ch_03/#team-level","text":"Scrum Scrum is a framework that helps teams work together. Much like a rugby team (where it gets its name) training for the big game, scrum encourages teams to learn through experiences, self-organize while working on a problem, and reflect on their wins and losses to continuously improve. XP Extreme programming (XP) is a software development methodology intended to improve software quality and responsiveness to changing customer requirements. As a type of agile software development, it advocates frequent releases in short development cycles, intended to improve productivity and introduce checkpoints at which new customer requirements can be adopted. Kanban Kanban is a popular framework used to implement agile and DevOps software development. It requires real-time communication of capacity and full transparency of work. Work items are represented visually on a kanban board, allowing team members to see the state of every piece of work at any time. Scrumban Scrumban is a project management framework that combines important features of two popular agile methodologies: Scrum and Kanban. The Scrumban framework merges the structure and predictable routines of Scrum with Kanban\u2019s flexibility to make teams more agile, efficient, and productive. Scrum of Scrums Scrum of Scrums is a scaled agile technique that offers a way to connect multiple teams who need to work together to deliver complex solutions. It helps teams develop and deliver complex products through transparency, inspection, and adaptation, at scale. It\u2019s particularly successful when all high-performing scrum team members work towards a common goal, have trust, respect, and are completely aligned.","title":"Team Level"},{"location":"DevOps/ch_03/#scaling-agile","text":"SAFe The Scaled Agile Framework\u00ae (SAFe\u00ae) is a set of organizational and workflow patterns for implementing agile practices at an enterprise scale. The framework is a body of knowledge that includes structured guidance on roles and responsibilities, how to plan and manage the work, and values to uphold. SAFe promotes alignment, collaboration, and delivery across large numbers of agile teams. It was formed around three primary bodies of knowledge: agile software development, lean product development, and systems thinking. Disciplined Agile Delivery (DAD) Disciplined Agile\u00ae Delivery (DAD) is a people-first, learning-oriented hybrid agile approach to IT solution delivery. DAD addresses all aspects of the full delivery life cycle, supporting multiple ways of working (WoW) that can be tailored for the context that you face. DAD encompasses all aspects of agile software development in a robust, pragmatic, and governable manner. LeSS LeSS is a scaled up version of one-team Scrum, and it maintains many of the practices and ideas of one-team Scrum.","title":"Scaling Agile"},{"location":"DevOps/ch_04/","text":"DevOps Think about it, extreme programming requires delivering software in shorter cycles. The problem is if you shorten the release time, how would you effectively test and deploy the software? The DevOps movement began around 2007 when the software development and IT operations communities raised concerns about the traditional software development model, where developers who wrote code worked apart from operations who deployed and supported the code. The term DevOps, a combination of the words development and operations, reflects the process of integrating these disciplines into one, continuous process. A DevOps team includes developers and IT operations working collaboratively throughout the product lifecycle, in order to increase the speed and quality of software deployment. It\u2019s a new way of working, a cultural shift, that has significant implications for teams and the organizations they work for. The DevOps lifecycle consists of eight phases representing the processes, capabilities, and tools needed for development (on the left side of the loop) and operations (on the right side of the loop). Throughout each phase, teams collaborate and communicate to maintain alignment, velocity, and quality.","title":"DevOps"},{"location":"DevOps/ch_04/#devops","text":"Think about it, extreme programming requires delivering software in shorter cycles. The problem is if you shorten the release time, how would you effectively test and deploy the software? The DevOps movement began around 2007 when the software development and IT operations communities raised concerns about the traditional software development model, where developers who wrote code worked apart from operations who deployed and supported the code. The term DevOps, a combination of the words development and operations, reflects the process of integrating these disciplines into one, continuous process. A DevOps team includes developers and IT operations working collaboratively throughout the product lifecycle, in order to increase the speed and quality of software deployment. It\u2019s a new way of working, a cultural shift, that has significant implications for teams and the organizations they work for. The DevOps lifecycle consists of eight phases representing the processes, capabilities, and tools needed for development (on the left side of the loop) and operations (on the right side of the loop). Throughout each phase, teams collaborate and communicate to maintain alignment, velocity, and quality.","title":"DevOps"},{"location":"DevOps/ch_05/","text":"12 factor app Sourced from 12factor.net Codebase - One codebase tracked in revision control, many deploys Dependencies - Explicitly declare and isolate dependencies Config - Store config in the environment Backing services - Treat backing services as attached resources Build, release, run - Strictly separate build and run stages Processes - Execute the app as one or more stateless processes Port binding - Export services via port binding Concurrency - Scale out via the process model Disposability - Maximize robustness with fast startup and graceful shutdown Dev/prod parity - Keep development, staging, and production as similar as possible Logs - Treat logs as event streams Admin processes - Run admin/management tasks as one-off processes","title":"12 factor app"},{"location":"DevOps/ch_05/#12-factor-app","text":"Sourced from 12factor.net Codebase - One codebase tracked in revision control, many deploys Dependencies - Explicitly declare and isolate dependencies Config - Store config in the environment Backing services - Treat backing services as attached resources Build, release, run - Strictly separate build and run stages Processes - Execute the app as one or more stateless processes Port binding - Export services via port binding Concurrency - Scale out via the process model Disposability - Maximize robustness with fast startup and graceful shutdown Dev/prod parity - Keep development, staging, and production as similar as possible Logs - Treat logs as event streams Admin processes - Run admin/management tasks as one-off processes","title":"12 factor app"},{"location":"Linux/ch_01/","text":"","title":"Ch 01"},{"location":"Virtualization/ch_01/","text":"","title":"Ch 01"}]}