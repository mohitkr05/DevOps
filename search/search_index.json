{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DevOps Tutorial A documentation for the Youtube series to understand DevOps. Available in English and Hindi (Please note these are not translations) English Chapters Hindi Chapters Discussion","title":"Home"},{"location":"#devops-tutorial","text":"A documentation for the Youtube series to understand DevOps. Available in English and Hindi (Please note these are not translations)","title":"DevOps Tutorial"},{"location":"#english-chapters","text":"","title":"English Chapters"},{"location":"#hindi-chapters","text":"","title":"Hindi Chapters"},{"location":"#discussion","text":"","title":"Discussion"},{"location":"ch_01/","text":"Building Software Let us how software is built. Traditionally, the procedure to build software was slow and linear. Usually termed as a waterfall model had each step dedidcated to a single task. Waterfall model Each step tried to answer some simple question. Requirements What are the requirements of the customer? Design How to build the software with all these requirements? How the high level design looks like? What are the components required Implementation The actual building of the software? Verfication How is the software performing as per the requirements of the customer? Maintenance Are there any operational issues, bug-fixes and patches required? Advantages Simple to implement Clear requirements Problem with this methodology Slow Resistant to change Feedback? Scoping issues Integration is painful.","title":"Building Software"},{"location":"ch_01/#building-software","text":"Let us how software is built. Traditionally, the procedure to build software was slow and linear. Usually termed as a waterfall model had each step dedidcated to a single task.","title":"Building Software"},{"location":"ch_01/#waterfall-model","text":"Each step tried to answer some simple question. Requirements What are the requirements of the customer? Design How to build the software with all these requirements? How the high level design looks like? What are the components required Implementation The actual building of the software? Verfication How is the software performing as per the requirements of the customer? Maintenance Are there any operational issues, bug-fixes and patches required?","title":"Waterfall model"},{"location":"ch_01/#advantages","text":"Simple to implement Clear requirements","title":"Advantages"},{"location":"ch_01/#problem-with-this-methodology","text":"Slow Resistant to change Feedback? Scoping issues Integration is painful.","title":"Problem with this methodology"},{"location":"ch_02/","text":"Agile The major issue with the waterfall model was that it was resistant to change & feedback. Thus some methodolo- gies and practices were required that would embrace, rather than reject,higher rates of change and would be open to feedback. In February 2001, 17 practitioners and authors met in Snowbird, Utah decided to work on software delivery practice that would focus on customer satisfaction and high quality. They cate- gorized their methodologies as \u201cagile\u201d\u2014a term with a decade of use in flexible manufacturing practices Agile Manifesto We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value : - Individuals and interactions over processes and tools - Working software over comprehensive documentation - Customer collaboration over contract negotiation - Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more. Agile manifesto principles Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Business people and developers must work together daily throughout the project. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Working software is the primary measure of progress. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Continuous attention to technical excellence and good design enhances agility. Simplicity \u2014 the art of maximizing the amount of work not done \u2014 is essential. The best architectures, requirements, and designs emerge from self-organizing teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.","title":"Agile"},{"location":"ch_02/#agile","text":"The major issue with the waterfall model was that it was resistant to change & feedback. Thus some methodolo- gies and practices were required that would embrace, rather than reject,higher rates of change and would be open to feedback. In February 2001, 17 practitioners and authors met in Snowbird, Utah decided to work on software delivery practice that would focus on customer satisfaction and high quality. They cate- gorized their methodologies as \u201cagile\u201d\u2014a term with a decade of use in flexible manufacturing practices Agile Manifesto We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value : - Individuals and interactions over processes and tools - Working software over comprehensive documentation - Customer collaboration over contract negotiation - Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more.","title":"Agile"},{"location":"ch_02/#agile-manifesto-principles","text":"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Business people and developers must work together daily throughout the project. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Working software is the primary measure of progress. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Continuous attention to technical excellence and good design enhances agility. Simplicity \u2014 the art of maximizing the amount of work not done \u2014 is essential. The best architectures, requirements, and designs emerge from self-organizing teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.","title":"Agile manifesto principles"},{"location":"docs/","text":"Articles Building Software The Waterfall model Agile Types of Agile frameworks DevOps","title":"Docs"},{"location":"docs/#articles","text":"Building Software The Waterfall model Agile Types of Agile frameworks DevOps","title":"Articles"}]}